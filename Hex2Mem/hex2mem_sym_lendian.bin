_reset: TXDCHAR <= zero, errcode_reset1: TXDCHAR <= zero, errcod_reset2: TXDCHAR <= zero, errcod_reset3: TXDCHAR <= zero, errcoddeadloop: BUSY = 0, if input_is_trace();                        poscnt_cin = 1, if true then forbadchar: errcode <= err_badchar,badcolon: errcode <= err_unexpecbadchecksum: errcode <= err_badcbadtype: errcode <= err_badrecorbadlength: errcode <= err_badrecbadhex: errcode <= err_unexpecteprinterror: emit(char_E);       emit(char_R);                   emit(char_R);                   emit(errcode);                  emit(char_space);               emit(lin_chk3);                 emit(lin_chk2);                 emit(lin_chk1);                 emit(lin_chk0);                 emit(char_space);               emit(pos_ram1);                 emit(pos_ram0);                 emit(char_space);               emit(inp1);                     hexcnt <= ptr_colon, emit(inp0);print_crlf();                   nextchar: errcode <= ok, input_rprintramR: emit(char_R);        printram: emit(char_EQU);       emit(pos_ram1);                 emit(pos_ram0);                 print_crlf: emit(char_cr);      TXDCHAR <= char_lf, if false theprintaddr: emit(addr3);         emit(addr2);                    emit(addr1);                    TXDCHAR <= addr0, if false then                                                                                                                                                                                                                                                                 ram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnram_write = 1, ram_addr = bytecnhexchar: if bytecnt_at_colon theif hexcnt_is_odd then next else ram_addr = bytecnt, checksum <= dontadd: hexcnt <= inc, if falseif prev_is_crorlf then nextchar if prev_is_crorlf then nextchar newline: compa = checksum_lsb, cposcnt_a = zero, lincnt_cin = 1,ram_addr = ptr_type, compa = ramram_addr = ptr_type, compa = ramram_addr = ptr_len, compa = ram,ram_addr = ptr_addr_hi, address ram_addr = ptr_addr_lo, address writeloop: ram_addr = ptr_len, cwritemem: ram_addr = bytecnt, nBram_addr = bytecnt, nBUSREQ = 0,ram_addr = bytecnt, nBUSREQ = 0,ram_addr = bytecnt, nBUSREQ = 0,if TRACE_WRITE then next else neemit(char_A);                   emit(char_open);                printaddr();                    emit(char_close);               printram();                     nextaddr: hexcnt <= inc;        hexcnt <= inc, address <= inc, ilastrec: lincnt_a = zero, if resram_addr = ptr_len, compa = ram,nextrec: hexcnt <= ptr_colon, ifspace: if prev_is_spaceortab theif hexcnt_is_odd then badchar elcolon: checksum <= zero, if bytehexcnt <= inc;                  hexcnt <= inc, if false then nextrace: if TRACE_CHAR then next eemit(char_I);                   emit(char_EQU);                 emit(inp1);                     emit(inp0);                     emit(char_space);               emit(char_A);                   emit(char_EQU);                 printaddr();                    emit(char_space);               emit(char_C);                   emit(char_EQU);                 emit(lin_chk3);                 emit(lin_chk2);                 emit(lin_chk1);                 emit(lin_chk0);                 emit(char_space);               emit(flags);                    emit(char_space);               emit(char_B);                   emit(char_EQU);                 emit(bytecnt1);                 emit(bytecnt0);                 emit(char_space);               if false then next else printramemit: if TXDREADY then next elseif TXDREADY then next else repeaif TXDREADY then next else repeaif TXDSEND then return else retu                                hexchar: if bytecnt_at_colon then badhex;                       if hexcnt_is_odd then next else dontadd;                        ram_addr = bytecnt, checksum <= add_ram;                        dontadd: hexcnt <= inc, if false then next else nextchar;       if prev_is_crorlf then nextchar else newline;                   if prev_is_crorlf then nextchar else next;                      newline: compa = checksum_lsb, compb = zero, if compa_equals_composcnt_a = zero, lincnt_cin = 1, if hexcnt_is_odd then badhex elram_addr = ptr_type, compa = ram, compb = one, if compa_equals_cram_addr = ptr_type, compa = ram, compb = zero, if compa_equals_ram_addr = ptr_len, compa = ram, compb = bytecnt_dec, if compa_eram_addr = ptr_addr_hi, address <= shift8ram, hexcnt <= zero;   ram_addr = ptr_addr_lo, address <= shift8ram, hexcnt <= zero;   writeloop: ram_addr = ptr_len, compa = ram, compb = bytecnt, if writemem: ram_addr = bytecnt, nBUSREQ = 0;                      ram_addr = bytecnt, nBUSREQ = 0, if nBUSACK then repeat else nexram_addr = bytecnt, nBUSREQ = 0, nWR = 0;                       ram_addr = bytecnt, nBUSREQ = 0, nWR = 0, if nWAIT then next elsif TRACE_WRITE then next else nextaddr;                         if false then emitChar else emitChar, TXDCHAR <= char_A;        if false then emitChar else emitChar, TXDCHAR <= char_open;     if false then printaddr else printaddr;                         if false then emitChar else emitChar, TXDCHAR <= char_close;    if false then printram else printram;                           nextaddr: hexcnt <= inc;                                        hexcnt <= inc, address <= inc, if false then next else writelooplastrec: lincnt_a = zero, if resetout_done then next else next; ram_addr = ptr_len, compa = ram, compb = zero, if compa_equals_cnextrec: hexcnt <= ptr_colon, if false then next else nextchar; dumpram: if false then emitChar else emitChar, TXDCHAR <= char_Rif false then emitChar else emitChar, TXDCHAR <= bytecnt1;      if false then emitChar else emitChar, TXDCHAR <= bytecnt0;      if false then printram else printram;                           if true then return else return;                                space: if prev_is_spaceortab then nextchar else next;           if hexcnt_is_odd then badchar else nextchar;                    colon: checksum <= zero, if bytecnt_at_colon then next else badchexcnt <= inc;                                                  hexcnt <= inc, if false then next else nextchar;                trace: if TRACE_CHAR then next else return;                     if false then emitChar else emitChar, TXDCHAR <= char_I;        if false then emitChar else emitChar, TXDCHAR <= char_EQU;      if false then emitChar else emitChar, TXDCHAR <= inp1;          if false then emitChar else emitChar, TXDCHAR <= inp0;          if false then emitChar else emitChar, TXDCHAR <= char_space;    if false then emitChar else emitChar, TXDCHAR <= char_A;        if false then emitChar else emitChar, TXDCHAR <= char_EQU;      if false then printaddr else printaddr;                         if false then emitChar else emitChar, TXDCHAR <= char_space;    if false then emitChar else emitChar, TXDCHAR <= char_C;        if false then emitChar else emitChar, TXDCHAR <= char_EQU;      if false then emitChar else emitChar, TXDCHAR <= lin_chk3;      if false then emitChar else emitChar, TXDCHAR <= lin_chk2;      if false then emitChar else emitChar, TXDCHAR <= lin_chk1;      if false then emitChar else emitChar, TXDCHAR <= lin_chk0;      if false then emitChar else emitChar, TXDCHAR <= char_space;    if false then emitChar else emitChar, TXDCHAR <= char_B;        if false then emitChar else emitChar, TXDCHAR <= char_EQU;      if false then emitChar else emitChar, TXDCHAR <= bytecnt1;      if false then emitChar else emitChar, TXDCHAR <= bytecnt0;      if false then emitChar else emitChar, TXDCHAR <= char_space;    if false then next else printramR;                                                                                                                                                              