_reset: MT_CTRL = clear, errcode_reset1: MT_CTRL = clear, errcod_reset2: MT_CTRL = clear, errcod_reset3: MT_CTRL = clear, errcoddeadloop: STATUS = ready, if inptrace();                        if true then fork else fork;    badchar: errcode <= err_badchar,printerror: emit(char_E);       emit(char_R);                   emit(char_R);                   emit(errcode);                  emit(char_space);               emit(inp1);                     print_crlf();                   nextchar: STATUS = done, errcodeswap: STATUS = busy_using_mt, MTif false then next else exec;   enter: STATUS = busy_using_mt, Mif false then next else exec;   regs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mregs <= load, MT_ROW = 0b1110, Mhexchar: STATUS = busy_using_mt,STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL exec: run_div2();               if false then next else nextcharSTATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL run_div2();                     if false then next else nextcharrun_div2: bitcnt <= zero;       run_loop: STATUS = busy_using_mtif bitcnt_is_zero then return elmatrix_swap: STATUS = busy_usingSTATUS = busy_using_mt, MT_CTRL matrix_nop: STATUS = busy_using_STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL matrix_push: STATUS = busy_usingSTATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL trace: if TRACE_CHAR then next eemit(char_I);                   emit(char_EQU);                 emit(inp1);                     emit(inp0);                     print_crlf: emit(char_cr);      TXDCHAR <= char_lf;             emit: if TXDREADY then next elseif TXDREADY then next else repeaif TXDREADY then next else repeaif TXDSEND then return else retu