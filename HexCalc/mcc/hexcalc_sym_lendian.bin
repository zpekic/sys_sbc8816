_reset: MT_CTRL = clear, errcode_reset1: MT_CTRL = clear, errcod_reset2: MT_CTRL = clear, errcod_reset3: MT_CTRL = clear, errcoddeadloop: STATUS = ready, if inptrace();                        if true then fork else fork;    badchar: errcode <= err_badchar,printerror: emit(char_E);       emit(char_R);                   emit(char_R);                   emit(errcode);                  emit(char_space);               emit(inp1);                     emit(inp0);                     print_crlf();                   nextchar: STATUS = done, if falsSTATUS = busy_using_mt, MT_CTRL if false then next else exec;   errcode <= ok, STATUS = busy_usierrcode <= ok, STATUS = busy_usiexec1: c_flag <= flip;          exec: z_flags <= set, bitcnt <= if false then next else nextchardiv2: STATUS = busy_using_mt, opbitcnt <= dec, if false then nexplus: STATUS = busy_using_mt, MTSTATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL minus: STATUS = busy_using_mt, MSTATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL mul: STATUS = busy_using_mt, MT_loopcnt <= max, STATUS = busy_usbitcnt <= max, STATUS = busy_usiSTATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL m_loop: STATUS = busy_using_mt, STATUS = busy_using_mt, opr = npSTATUS = busy_using_mt, opr = npSTATUS = busy_using_mt, MT_CTRL m_add_0: opr = np_np_ld, MT_ROW STATUS = busy_using_mt, MT_CTRL m_add_r7: c_flag <= flip, STATUSm_add: STATUS = busy_using_mt, Mbitcnt <= max, STATUS = busy_usiSTATUS = busy_using_mt, MT_CTRL d_flag <= carry, STATUS = busy_uSTATUS = busy_using_mt, MT_CTRL if loopcnt_is_zero then nextcharSTATUS = busy_using_mt, MT_CTRL loopcnt <= dec, if false then neenter: STATUS = busy_using_mt, Mif false then next else exec;   opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,opr = np_np_ld, MT_ROW = 0b0000,hexchar: STATUS = busy_using_mt,bitcnt <= load, MT_COL = 3;     STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, opr = m2bitcnt <= load, MT_COL = 3;     STATUS = busy_using_mt, opr = npmatrix_swap: STATUS = busy_usingSTATUS = busy_using_mt, MT_CTRL matrix_nop1: STATUS = busy_usingmatrix_nop: STATUS = busy_using_STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL matrix_push: STATUS = busy_usingSTATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL matrix_pop: STATUS = busy_using_STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL STATUS = busy_using_mt, MT_CTRL trace: if TRACE_CHAR then next eemit(char_I);                   emit(char_EQU);                 emit(inp1);                     emit(inp0);                     print_crlf: emit(char_cr);      emit(char_lf);                  if true then return else return;emit: if TXDREADY then next elseif TXDREADY then next else repeaif TXDREADY then next else repeaif TXDSEND then return else retu                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                